// Generated by CoffeeScript 1.10.0
(function() {
  var DiffHandler, RandomKeyGenerator, Server, StorageController, commands, diffModulesCount, getDiffs, getDir, getDirs, getFile, getGuitarDiff, hasCommand, initCommands, moduleTypes, pushDiff, pushModel, server, serverEvents, setModuleType;

  Server = require('ws').Server;

  DiffHandler = require('./utility/server.diff-handler');

  StorageController = require('./utility/storage.controller');

  RandomKeyGenerator = require('./utility/random-key.generator');

  server = new Server({
    port: 8080
  });

  server.generateResponse = function(status, data) {
    switch (status) {
      case 'success':
        return {
          status: status,
          type: arguments[0],
          data: data
        };
      case 'error':
        return {
          status: status,
          message: data
        };
    }
  };

  server.broadcastDiffModules = function(key, data) {
    var i, len, module, ref, ref1, request, results;
    request = {
      key: key,
      libV1PathDoc: data.libV1Path + '/doc',
      libV2PathDoc: data.libV2Path + '/doc',
      libV1PathSrc: data.libV1Path + '/src',
      libV2PathSrc: data.libV2Path + '/src'
    };
    ref = server.clients;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      module = ref[i];
      if ((ref1 = module.type) === 'documentation' || ref1 === 'code' || ref1 === 'fat model code') {
        results.push(module.send(JSON.stringify(request)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  moduleTypes = ['interface', 'documentation', 'code', 'fat model code', 'source migrate', 'diff machine'];

  diffModulesCount = 0;

  commands = void 0;

  initCommands = function() {
    return commands = {
      getDiffs: getDiffs,
      getDir: getDir,
      getDirs: getDirs,
      getFile: getFile,
      getGuitarDiff: getGuitarDiff,
      hasCommand: hasCommand,
      pushDiff: pushDiff,
      pushModel: pushModel,
      setModuleType: setModuleType
    };
  };

  setModuleType = function(module, data) {
    var message, ref, response;
    if (moduleTypes.indexOf(data) > -1) {
      module.type = data;
      if ((ref = module.type) === 'documentation' || ref === 'code' || ref === 'fat model code') {
        diffModulesCount++;
      }
      message = "now module type is " + data;
      response = server.generateResponse('success', message, 'setType');
      return module.send(JSON.stringify(response));
    } else {
      ({
        message: 'module type is undefined'
      });
      response = server.generateResponse('error', message);
      return module.send(JSON.stringify(response));
    }
  };

  getDiffs = function(module, data) {
    var key;
    key = RandomKeyGenerator.makeKey();
    DiffHandler.addRequestedDiffList(key, module);
    return server.broadcastDiffModules(key, data);
  };

  getDir = function(module, data) {
    return StorageController.readDir("../storage" + data).then(function(items) {
      var response;
      response = server.generateResponse('success', items, 'dir');
      return module.send(JSON.stringify(response));
    })["catch"](function(err) {
      var message, response;
      console.log(err);
      message = "can't read libs dir";
      response = server.generateResponse('error', message);
      return module.send(JSON.stringify(response));
    });
  };

  getDirs = function(module) {
    return StorageController.readDir("../storage").then(function(items) {
      var response;
      response = server.generateResponse('success', items, 'dirs');
      return module.send(JSON.stringify(response));
    })["catch"](function(err) {
      var message, response;
      console.log(err);
      message = "can't read libs dirs";
      response = server.generateResponse('error', message);
      return module.send(JSON.stringify(response));
    });
  };

  getFile = function(module, data) {
    return StorageController.readFile("../storage" + data).then(function(data) {
      var response;
      response = server.generateResponse('success', data, 'file');
      return module.send(JSON.stringify(response))["catch"](function(err) {
        var message;
        console.log(err);
        message = "can't read file";
        response = server.generateResponse('error', message);
        return module.send(JSON.stringify(response));
      });
    });
  };

  getGuitarDiff = function(module) {
    StorageController.readFile("../storage/guitar/guitar.json").then(function(data) {
      var response;
      response = server.generateResponse('success', data, 'file');
      return module.send(JSON.stringify(response));
    })["catch"](function(err) {
      var message, response;
      console.log(err);
      message = "can't read file";
      response = server.generateResponse('error', message);
      return module.send(JSON.stringify(response));
    });
    return module.send();
  };

  hasCommand = function(command) {
    if (commands[command]) {
      return true;
    }
  };

  pushDiff = function(module, data) {
    var diffs, recipient;
    DiffHandler.pushDiff(data.key, data.diffList);
    if (DiffHandler.getRequestedDiffListLength(data.key) === diffModulesCount) {
      diffs = DiffHandler.getRequestedDiffList(data.key);
      recipient = DiffHandler.getRequestedDiffListRecipient(data.key);
      recipient.send(JSON.stringify(diffs));
      return DiffHandler.removeRequestedDiffList(key);
    }
  };

  pushModel = function(module, data) {};

  initCommands();

  serverEvents = function(client) {
    console.log('new module connected');
    return client.on('message', function(message) {
      var event;
      console.log('received: %s', message);
      event = JSON.parse(message);
      if (commands.hasCommand(event.cmd)) {
        return commands[event.cmd](client, event.data);
      } else {
        return client.send(JSON.stringify({
          error: 'command not found'
        }));
      }
    });
  };

  server.on('connection', serverEvents);

}).call(this);

//# sourceMappingURL=server.main.js.map
