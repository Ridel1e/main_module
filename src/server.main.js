// Generated by CoffeeScript 1.10.0
(function() {
  var DiffHandler, Server, diffModuleCount, jsonfile, mkdirp, receivedDiffs, saveLibDiff, server, serverEvents, waitingRequestInterface;

  Server = require('ws').Server;

  jsonfile = require('jsonfile');

  mkdirp = require('mkdirp');

  DiffHandler = require('./utility/server.diff-handler');

  server = new Server({
    port: 8080
  });

  server.broadcastDiffModules = function(data) {
    var client, i, len, ref, results;
    ref = server.clients;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      client = ref[i];
      if (client.type === 'diffFind') {
        results.push(client.send(data));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  saveLibDiff = function(fileName, diff) {
    var fileFullName;
    mkdirp("./file_storage/" + fileName, function(err) {
      return console.log(err);
    });
    fileFullName = "./file_storage/" + fileName + "/" + fileName;
    return jsonfile.writeFile(fileFullName, diff, function(err) {
      return console.log(err);
    });
  };

  receivedDiffs = [];

  diffModuleCount = 0;

  waitingRequestInterface = void 0;

  serverEvents = function(client) {
    console.log('module connected');
    client.type = 'diffFind';
    diffModuleCount++;
    return client.on('message', function(message) {
      var event, fileFullName, libName, outputDiffs, splitedLibPath;
      console.log('received: %s', message);
      event = JSON.parse(message);
      switch (event.type) {
        case 'moduleType':
          client.type = event.parameters;
          console.log("new module type is " + client.type);
          return diffModuleCount--;
        case 'addLib':
          return createDirectory();
        case 'pushDiff':
          receivedDiffs.push(event.parameters);
          if (receivedDiffs.length === diffModuleCount) {
            console.log('All diffs received');
            outputDiffs = DiffHandler.handleDiffs(receivedDiffs);
            saveLibDiff(waitingRequestInterface.libName, outputDiffs);
            return waitingRequestInterface.client.send(JSON.stringify(outputDiffs));
          }
          break;
        case 'getDiff':
          console.log('response pending...');
          splitedLibPath = event.parameters.libV2Path.split('/');
          libName = splitedLibPath[splitedLibPath.length - 2];
          waitingRequestInterface = {
            client: client,
            libName: libName
          };
          fileFullName = "./file_storage/" + libName + "/" + libName;
          return jsonfile.readFile(fileFullName, function(err, object) {
            var filesPath;
            if (!object) {
              filesPath = {
                libDocumentationV1Path: event.parameters.libV1Path,
                libDocumentationV2Path: event.parameters.libV2Path,
                libSourceCodeV1Path: event.parameters.libV1Path + '/src',
                libSourceCodeV2Path: event.parameters.libV2Path + '/src'
              };
              return server.broadcastDiffModules(JSON.stringify(filesPath));
            } else {
              console.log('repeat');
              return client.send(JSON.stringify(object));
            }
          });
        default:
          return console.log('undefined command');
      }
    });
  };

  server.on('connection', serverEvents);

}).call(this);

//# sourceMappingURL=server.main.js.map
